#!/usr/bin/env ruby

require_relative '../lib/deployless'

class Command
  include TTY::Option

  argument :command do
    desc "The command to run"
  end

  argument :task do
    desc "The task to run"
  end
end

command = Command.new
command.parse(ARGV)

case command.params['command']
when 'init'
  prompt = TTY::Prompt.new
  configuration = prompt.collect do
    key(:deployment_setup).enum_select("Deployment setup:", ["Dokku"], required: true)
    key(:background_job_processor).enum_select("Background job processor:", ["None", "Sidekiq"], required: true)
    key(:app_name).ask("Application name:", required: true)
    key(:support_for_staging_environment).enum_select("Support for staging environment?:", ["Yes", "No"], required: true)
  end

  environments = %i[production]
  environments << :staging if configuration.fetch(:support_for_staging_environment) == 'Yes'

  environments.each do |environment|
    puts "Configuring #{environment} environment"
    configuration[environment] = prompt.collect do
      key(:server_ip).ask("Server IP:", required: true)
      key(:ssh_key_path).ask("SSH key path:", required: true, default: '~/.ssh/id_rsa')
      key(:server_username).ask("Server username:", required: true, default: 'ubuntu')
      key(:email).ask("Email:", required: true)
      key(:domain).ask("Domain:", required: true)
    end

    configuration[environment][:environment_variables] = {
      secret_key_base: SecureRandom.hex(64),
      rails_env: environment,
      rake_env: environment,
      rails_log_to_stdout: 'enabled',
      rails_serve_static_files: 'enabled'
    }
  end

  TTY::File.create_file('.deployless.yml', configuration.to_yaml)
  TTY::File.safe_append_to_file(".gitignore", ".deployless.yml")
when 'production', 'staging'
  case command.params['task']
  when 'console'
    config = YAML.load_file('.deployless.yml')
    raise ArgumentError, "Environment #{command.params['command']} is not configured" if config[command.params['command'].to_sym].nil?

    provider = ::Deployless::Providers::DokkuProvider.new(
      config: config,
      environment: command.params['command']
    )
    provider.run_console
  when 'prepare'
    config = YAML.load_file('.deployless.yml')
    raise ArgumentError, "Environment #{command.params['command']} is not configured" if config[command.params['command'].to_sym].nil?

    provider = ::Deployless::Providers::DokkuProvider.new(
      config: config,
      environment: command.params['command']
    )
    provider.configure_environment
  when 'update-env'
    config = YAML.load_file('.deployless.yml')
    raise ArgumentError, "Environment #{command.params['command']} is not configured" if config[command.params['command'].to_sym].nil?

    provider = ::Deployless::Providers::DokkuProvider.new(
      config: config,
      environment: command.params['command']
    )
    provider.update_environment_variables
  else
    puts 'Unknown task'
  end
else
  puts 'Unknown command'
end

